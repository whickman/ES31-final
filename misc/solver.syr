Release 14.4 - xst P.49d (nt64)
Copyright (c) 1995-2012 Xilinx, Inc.  All rights reserved.
--> Parameter TMPDIR set to xst/projnav.tmp


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.13 secs
 
--> Parameter xsthdpdir set to xst


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.13 secs
 
--> Reading design: solver.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Parsing
  3) HDL Elaboration
  4) HDL Synthesis
       4.1) HDL Synthesis Report
  5) Advanced HDL Synthesis
       5.1) Advanced HDL Synthesis Report
  6) Low Level Synthesis
  7) Partition Report
  8) Design Summary
       8.1) Primitive and Black Box Usage
       8.2) Device utilization summary
       8.3) Partition Resource Summary
       8.4) Timing Report
            8.4.1) Clock Information
            8.4.2) Asynchronous Control Signals Information
            8.4.3) Timing Summary
            8.4.4) Timing Details
            8.4.5) Cross Clock Domains Report


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "solver.prj"
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "solver"
Output Format                      : NGC
Target Device                      : xc6slx16-3-csg324

---- Source Options
Top Module Name                    : solver
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : LUT
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Shift Register Extraction          : YES
ROM Style                          : Auto
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Shift Register Minimum Size        : 2
Use DSP Block                      : Auto
Automatic Register Balancing       : No

---- Target Options
LUT Combining                      : Auto
Reduce Control Sets                : Auto
Add IO Buffers                     : YES
Global Maximum Fanout              : 100000
Add Generic Clock Buffer(BUFG)     : 16
Register Duplication               : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Auto
Use Synchronous Set                : Auto
Use Synchronous Reset              : Auto
Pack IO Registers into IOBs        : Auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Power Reduction                    : NO
Keep Hierarchy                     : No
Netlist Hierarchy                  : As_Optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : Maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
DSP48 Utilization Ratio            : 100
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

---- Other Options
Cores Search Directories           : {".."  }

=========================================================================


=========================================================================
*                          HDL Parsing                                  *
=========================================================================
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\cbuff.vhd" into library work
Parsing entity <cbuff>.
Parsing architecture <xilinx> of entity <cbuff>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\cbuff\example_design\cbuff_exdes.vhd" into library work
Parsing entity <cbuff_exdes>.
Parsing architecture <xilinx> of entity <cbuff_exdes>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\shift_reg.vhd" into library work
Parsing entity <shift_reg>.
Parsing architecture <Behavioral> of entity <shift_reg>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\load_reg.vhd" into library work
Parsing entity <load_reg>.
Parsing architecture <Behavioral> of entity <load_reg>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\double_flop_sync.vhd" into library work
Parsing entity <double_flop_sync>.
Parsing architecture <Behavioral> of entity <double_flop_sync>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\controller.vhd" into library work
Parsing entity <controller>.
Parsing architecture <Behavioral> of entity <controller>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\reg_8b.vhd" into library work
Parsing entity <reg_8b>.
Parsing architecture <Behavioral> of entity <reg_8b>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\node.vhd" into library work
Parsing entity <node>.
Parsing architecture <Behavioral> of entity <node>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\vga_controller.vhd" into library work
Parsing entity <vga_controller>.
Parsing architecture <Behavioral> of entity <vga_controller>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\vga_color.vhd" into library work
Parsing entity <vga_color>.
Parsing architecture <Behavioral> of entity <vga_color>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\SerialTx2_14s.vhd" into library work
Parsing entity <SerialTx>.
Parsing architecture <Behavioral> of entity <serialtx>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\SerialRx.vhd" into library work
Parsing entity <SerialRx>.
Parsing architecture <Behavioral> of entity <serialrx>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\serial\brg.vhd" into library work
Parsing entity <brg>.
Parsing architecture <Behavioral> of entity <brg>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\node_matrix.vhd" into library work
Parsing entity <node_matrix>.
Parsing architecture <Behavioral> of entity <node_matrix>.
Parsing VHDL file "C:\Users\f000jg5\Desktop\final\solver.vhd" into library work
Parsing entity <solver>.
Parsing architecture <Behavioral> of entity <solver>.

=========================================================================
*                            HDL Elaboration                            *
=========================================================================

Elaborating entity <solver> (architecture <Behavioral>) from library <work>.

Elaborating entity <cbuff> (architecture <xilinx>) from library <work>.

Elaborating entity <brg> (architecture <Behavioral>) from library <work>.

Elaborating entity <SerialRx> (architecture <Behavioral>) from library <work>.

Elaborating entity <controller> (architecture <Behavioral>) from library <work>.
INFO:HDLCompiler:679 - "C:\Users\f000jg5\Desktop\final\serial\controller.vhd" Line 89. Case statement is complete. others clause is never selected

Elaborating entity <double_flop_sync> (architecture <Behavioral>) from library <work>.

Elaborating entity <shift_reg> (architecture <Behavioral>) from library <work>.

Elaborating entity <load_reg> (architecture <Behavioral>) from library <work>.

Elaborating entity <SerialTx> (architecture <Behavioral>) from library <work>.

Elaborating entity <node_matrix> (architecture <Behavioral>) from library <work>.

Elaborating entity <reg_8b> (architecture <Behavioral>) from library <work>.

Elaborating entity <node> (architecture <Behavioral>) from library <work>.
WARNING:HDLCompiler:92 - "C:\Users\f000jg5\Desktop\final\node_matrix.vhd" Line 321: beg_loc_r should be on the sensitivity list of the process
WARNING:HDLCompiler:92 - "C:\Users\f000jg5\Desktop\final\node_matrix.vhd" Line 322: end_loc_r should be on the sensitivity list of the process
INFO:HDLCompiler:679 - "C:\Users\f000jg5\Desktop\final\node_matrix.vhd" Line 419. Case statement is complete. others clause is never selected
INFO:HDLCompiler:679 - "C:\Users\f000jg5\Desktop\final\node_matrix.vhd" Line 439. Case statement is complete. others clause is never selected
INFO:HDLCompiler:679 - "C:\Users\f000jg5\Desktop\final\node_matrix.vhd" Line 460. Case statement is complete. others clause is never selected

Elaborating entity <vga_color> (architecture <Behavioral>) from library <work>.

Elaborating entity <vga_controller> (architecture <Behavioral>) from library <work>.

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Synthesizing Unit <solver>.
    Related source file is "C:\Users\f000jg5\Desktop\final\solver.vhd".
INFO:Xst:3210 - "C:\Users\f000jg5\Desktop\final\solver.vhd" line 111: Output port <CLK_OUT2> of the instance <cb> is unconnected or connected to loadless signal.
INFO:Xst:3210 - "C:\Users\f000jg5\Desktop\final\solver.vhd" line 130: Output port <tx_done_tick> of the instance <s_tx> is unconnected or connected to loadless signal.
    Summary:
	no macro.
Unit <solver> synthesized.

Synthesizing Unit <cbuff>.
    Related source file is "C:\Users\f000jg5\Desktop\final\cbuff.vhd".
    Summary:
	no macro.
Unit <cbuff> synthesized.

Synthesizing Unit <brg>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\brg.vhd".
    Found 1-bit register for signal <tick>.
    Found 32-bit register for signal <counter>.
    Found 32-bit adder for signal <counter[31]_GND_14_o_add_0_OUT> created at line 51.
    Summary:
	inferred   1 Adder/Subtractor(s).
	inferred  33 D-type flip-flop(s).
Unit <brg> synthesized.

Synthesizing Unit <SerialRx>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\SerialRx.vhd".
    Summary:
	no macro.
Unit <SerialRx> synthesized.

Synthesizing Unit <controller>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\controller.vhd".
    Found 32-bit register for signal <lastShift>.
    Found 32-bit register for signal <tick_counter>.
    Found 32-bit register for signal <counter>.
    Found 1-bit register for signal <last_br>.
    Found 3-bit register for signal <state>.
    Found finite state machine <FSM_0> for signal <state>.
    -----------------------------------------------------------------------
    | States             | 5                                              |
    | Transitions        | 8                                              |
    | Inputs             | 3                                              |
    | Outputs            | 6                                              |
    | Clock              | clk (rising_edge)                              |
    | Power Up State     | waiting                                        |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 32-bit adder for signal <tick_counter[31]_GND_16_o_add_15_OUT> created at line 99.
    Found 32-bit adder for signal <counter[31]_GND_16_o_add_19_OUT> created at line 104.
    Found 32-bit comparator greater for signal <counter[31]_GND_16_o_LessThan_4_o> created at line 73
    Found 32-bit comparator equal for signal <n0005> created at line 76
    Summary:
	inferred   2 Adder/Subtractor(s).
	inferred  97 D-type flip-flop(s).
	inferred   2 Comparator(s).
	inferred   3 Multiplexer(s).
	inferred   1 Finite State Machine(s).
Unit <controller> synthesized.

Synthesizing Unit <double_flop_sync>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\double_flop_sync.vhd".
    Found 2-bit register for signal <val>.
    Found 1-bit register for signal <async_out>.
    Summary:
	inferred   3 D-type flip-flop(s).
Unit <double_flop_sync> synthesized.

Synthesizing Unit <shift_reg>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\shift_reg.vhd".
    Found 10-bit register for signal <reg>.
    Summary:
	inferred  10 D-type flip-flop(s).
Unit <shift_reg> synthesized.

Synthesizing Unit <load_reg>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\load_reg.vhd".
    Found 8-bit register for signal <output>.
    Summary:
	inferred   8 D-type flip-flop(s).
Unit <load_reg> synthesized.

Synthesizing Unit <SerialTx>.
    Related source file is "C:\Users\f000jg5\Desktop\final\serial\SerialTx2_14s.vhd".
    Found 10-bit register for signal <tx_reg>.
    Found 4-bit register for signal <tx_ctr>.
    Found 3-bit register for signal <curr_state>.
    Found 4-bit register for signal <br_cnt>.
INFO:Xst:1799 - State ssync is never reached in FSM <curr_state>.
    Found finite state machine <FSM_1> for signal <curr_state>.
    -----------------------------------------------------------------------
    | States             | 6                                              |
    | Transitions        | 9                                              |
    | Inputs             | 4                                              |
    | Outputs            | 3                                              |
    | Clock              | Clk25 (rising_edge)                            |
    | Power Up State     | sidle                                          |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 4-bit adder for signal <br_cnt[3]_GND_20_o_add_0_OUT> created at line 1241.
    Found 4-bit subtractor for signal <GND_20_o_GND_20_o_sub_8_OUT<3:0>> created at line 1308.
    Summary:
	inferred   2 Adder/Subtractor(s).
	inferred  18 D-type flip-flop(s).
	inferred   1 Multiplexer(s).
	inferred   1 Finite State Machine(s).
Unit <SerialTx> synthesized.

Synthesizing Unit <node_matrix>.
    Related source file is "C:\Users\f000jg5\Desktop\final\node_matrix.vhd".
    Found 4-bit register for signal <back_state>.
    Found 8-bit register for signal <start_weights<0>>.
    Found 8-bit register for signal <start_weights<1>>.
    Found 8-bit register for signal <start_weights<2>>.
    Found 8-bit register for signal <start_weights<3>>.
    Found 8-bit register for signal <start_weights<4>>.
    Found 8-bit register for signal <start_weights<5>>.
    Found 8-bit register for signal <start_weights<6>>.
    Found 8-bit register for signal <start_weights<7>>.
    Found 8-bit register for signal <start_weights<8>>.
    Found 8-bit register for signal <start_weights<9>>.
    Found 8-bit register for signal <start_weights<10>>.
    Found 8-bit register for signal <start_weights<11>>.
    Found 8-bit register for signal <start_weights<12>>.
    Found 8-bit register for signal <start_weights<13>>.
    Found 8-bit register for signal <start_weights<14>>.
    Found 8-bit register for signal <start_weights<15>>.
    Found 8-bit register for signal <start_weights<16>>.
    Found 8-bit register for signal <start_weights<17>>.
    Found 8-bit register for signal <start_weights<18>>.
    Found 8-bit register for signal <start_weights<19>>.
    Found 8-bit register for signal <start_weights<20>>.
    Found 8-bit register for signal <start_weights<21>>.
    Found 8-bit register for signal <start_weights<22>>.
    Found 8-bit register for signal <start_weights<23>>.
    Found 8-bit register for signal <start_weights<24>>.
    Found 8-bit register for signal <start_weights<25>>.
    Found 8-bit register for signal <start_weights<26>>.
    Found 8-bit register for signal <start_weights<27>>.
    Found 8-bit register for signal <start_weights<28>>.
    Found 8-bit register for signal <start_weights<29>>.
    Found 8-bit register for signal <start_weights<30>>.
    Found 8-bit register for signal <start_weights<31>>.
    Found 8-bit register for signal <start_weights<32>>.
    Found 8-bit register for signal <start_weights<33>>.
    Found 8-bit register for signal <start_weights<34>>.
    Found 8-bit register for signal <start_weights<35>>.
    Found 8-bit register for signal <start_weights<36>>.
    Found 8-bit register for signal <start_weights<37>>.
    Found 8-bit register for signal <start_weights<38>>.
    Found 8-bit register for signal <start_weights<39>>.
    Found 8-bit register for signal <start_weights<40>>.
    Found 8-bit register for signal <start_weights<41>>.
    Found 8-bit register for signal <start_weights<42>>.
    Found 8-bit register for signal <start_weights<43>>.
    Found 8-bit register for signal <start_weights<44>>.
    Found 8-bit register for signal <start_weights<45>>.
    Found 8-bit register for signal <start_weights<46>>.
    Found 8-bit register for signal <start_weights<47>>.
    Found 8-bit register for signal <start_weights<48>>.
    Found 8-bit register for signal <start_weights<49>>.
    Found 8-bit register for signal <start_weights<50>>.
    Found 8-bit register for signal <start_weights<51>>.
    Found 8-bit register for signal <start_weights<52>>.
    Found 8-bit register for signal <start_weights<53>>.
    Found 8-bit register for signal <start_weights<54>>.
    Found 8-bit register for signal <start_weights<55>>.
    Found 8-bit register for signal <start_weights<56>>.
    Found 8-bit register for signal <start_weights<57>>.
    Found 8-bit register for signal <start_weights<58>>.
    Found 8-bit register for signal <start_weights<59>>.
    Found 8-bit register for signal <start_weights<60>>.
    Found 8-bit register for signal <start_weights<61>>.
    Found 8-bit register for signal <start_weights<62>>.
    Found 8-bit register for signal <start_weights<63>>.
    Found 8-bit register for signal <start_weights<64>>.
    Found 8-bit register for signal <start_weights<65>>.
    Found 8-bit register for signal <start_weights<66>>.
    Found 8-bit register for signal <start_weights<67>>.
    Found 8-bit register for signal <start_weights<68>>.
    Found 8-bit register for signal <start_weights<69>>.
    Found 8-bit register for signal <start_weights<70>>.
    Found 8-bit register for signal <start_weights<71>>.
    Found 8-bit register for signal <start_weights<72>>.
    Found 8-bit register for signal <start_weights<73>>.
    Found 8-bit register for signal <start_weights<74>>.
    Found 8-bit register for signal <start_weights<75>>.
    Found 8-bit register for signal <start_weights<76>>.
    Found 8-bit register for signal <start_weights<77>>.
    Found 8-bit register for signal <start_weights<78>>.
    Found 8-bit register for signal <start_weights<79>>.
    Found 8-bit register for signal <start_weights<80>>.
    Found 8-bit register for signal <start_weights<81>>.
    Found 8-bit register for signal <start_weights<82>>.
    Found 8-bit register for signal <start_weights<83>>.
    Found 8-bit register for signal <start_weights<84>>.
    Found 8-bit register for signal <start_weights<85>>.
    Found 8-bit register for signal <start_weights<86>>.
    Found 8-bit register for signal <start_weights<87>>.
    Found 8-bit register for signal <start_weights<88>>.
    Found 8-bit register for signal <start_weights<89>>.
    Found 8-bit register for signal <start_weights<90>>.
    Found 8-bit register for signal <start_weights<91>>.
    Found 8-bit register for signal <start_weights<92>>.
    Found 8-bit register for signal <start_weights<93>>.
    Found 8-bit register for signal <start_weights<94>>.
    Found 8-bit register for signal <start_weights<95>>.
    Found 8-bit register for signal <start_weights<96>>.
    Found 8-bit register for signal <start_weights<97>>.
    Found 8-bit register for signal <start_weights<98>>.
    Found 8-bit register for signal <start_weights<99>>.
    Found 8-bit register for signal <start_weights<100>>.
    Found 8-bit register for signal <start_weights<101>>.
    Found 8-bit register for signal <start_weights<102>>.
    Found 8-bit register for signal <start_weights<103>>.
    Found 8-bit register for signal <start_weights<104>>.
    Found 8-bit register for signal <start_weights<105>>.
    Found 8-bit register for signal <start_weights<106>>.
    Found 8-bit register for signal <start_weights<107>>.
    Found 8-bit register for signal <start_weights<108>>.
    Found 8-bit register for signal <start_weights<109>>.
    Found 8-bit register for signal <start_weights<110>>.
    Found 8-bit register for signal <start_weights<111>>.
    Found 8-bit register for signal <start_weights<112>>.
    Found 8-bit register for signal <start_weights<113>>.
    Found 8-bit register for signal <start_weights<114>>.
    Found 8-bit register for signal <start_weights<115>>.
    Found 8-bit register for signal <start_weights<116>>.
    Found 8-bit register for signal <start_weights<117>>.
    Found 8-bit register for signal <start_weights<118>>.
    Found 8-bit register for signal <start_weights<119>>.
    Found 8-bit register for signal <start_weights<120>>.
    Found 8-bit register for signal <start_weights<121>>.
    Found 8-bit register for signal <start_weights<122>>.
    Found 8-bit register for signal <start_weights<123>>.
    Found 8-bit register for signal <start_weights<124>>.
    Found 8-bit register for signal <start_weights<125>>.
    Found 8-bit register for signal <start_weights<126>>.
    Found 8-bit register for signal <start_weights<127>>.
    Found 8-bit register for signal <start_weights<128>>.
    Found 8-bit register for signal <start_weights<129>>.
    Found 8-bit register for signal <start_weights<130>>.
    Found 8-bit register for signal <start_weights<131>>.
    Found 8-bit register for signal <start_weights<132>>.
    Found 8-bit register for signal <start_weights<133>>.
    Found 8-bit register for signal <start_weights<134>>.
    Found 8-bit register for signal <start_weights<135>>.
    Found 8-bit register for signal <start_weights<136>>.
    Found 8-bit register for signal <start_weights<137>>.
    Found 8-bit register for signal <start_weights<138>>.
    Found 8-bit register for signal <start_weights<139>>.
    Found 8-bit register for signal <start_weights<140>>.
    Found 8-bit register for signal <start_weights<141>>.
    Found 8-bit register for signal <start_weights<142>>.
    Found 8-bit register for signal <start_weights<143>>.
    Found 8-bit register for signal <start_weights<144>>.
    Found 8-bit register for signal <start_weights<145>>.
    Found 8-bit register for signal <start_weights<146>>.
    Found 8-bit register for signal <start_weights<147>>.
    Found 8-bit register for signal <start_weights<148>>.
    Found 8-bit register for signal <start_weights<149>>.
    Found 8-bit register for signal <start_weights<150>>.
    Found 8-bit register for signal <start_weights<151>>.
    Found 8-bit register for signal <start_weights<152>>.
    Found 8-bit register for signal <start_weights<153>>.
    Found 8-bit register for signal <start_weights<154>>.
    Found 8-bit register for signal <start_weights<155>>.
    Found 8-bit register for signal <start_weights<156>>.
    Found 8-bit register for signal <start_weights<157>>.
    Found 8-bit register for signal <start_weights<158>>.
    Found 8-bit register for signal <start_weights<159>>.
    Found 8-bit register for signal <start_weights<160>>.
    Found 8-bit register for signal <start_weights<161>>.
    Found 8-bit register for signal <start_weights<162>>.
    Found 8-bit register for signal <start_weights<163>>.
    Found 8-bit register for signal <start_weights<164>>.
    Found 8-bit register for signal <start_weights<165>>.
    Found 8-bit register for signal <start_weights<166>>.
    Found 8-bit register for signal <start_weights<167>>.
    Found 8-bit register for signal <start_weights<168>>.
    Found 8-bit register for signal <start_weights<169>>.
    Found 8-bit register for signal <start_weights<170>>.
    Found 8-bit register for signal <start_weights<171>>.
    Found 8-bit register for signal <start_weights<172>>.
    Found 8-bit register for signal <start_weights<173>>.
    Found 8-bit register for signal <start_weights<174>>.
    Found 8-bit register for signal <start_weights<175>>.
    Found 8-bit register for signal <start_weights<176>>.
    Found 8-bit register for signal <start_weights<177>>.
    Found 8-bit register for signal <start_weights<178>>.
    Found 8-bit register for signal <start_weights<179>>.
    Found 8-bit register for signal <start_weights<180>>.
    Found 8-bit register for signal <start_weights<181>>.
    Found 8-bit register for signal <start_weights<182>>.
    Found 8-bit register for signal <start_weights<183>>.
    Found 8-bit register for signal <start_weights<184>>.
    Found 8-bit register for signal <start_weights<185>>.
    Found 8-bit register for signal <start_weights<186>>.
    Found 8-bit register for signal <start_weights<187>>.
    Found 8-bit register for signal <start_weights<188>>.
    Found 8-bit register for signal <start_weights<189>>.
    Found 8-bit register for signal <start_weights<190>>.
    Found 8-bit register for signal <start_weights<191>>.
    Found 8-bit register for signal <start_weights<192>>.
    Found 8-bit register for signal <start_weights<193>>.
    Found 8-bit register for signal <start_weights<194>>.
    Found 8-bit register for signal <start_weights<195>>.
    Found 8-bit register for signal <start_weights<196>>.
    Found 8-bit register for signal <start_weights<197>>.
    Found 8-bit register for signal <start_weights<198>>.
    Found 8-bit register for signal <start_weights<199>>.
    Found 8-bit register for signal <start_weights<200>>.
    Found 8-bit register for signal <start_weights<201>>.
    Found 8-bit register for signal <start_weights<202>>.
    Found 8-bit register for signal <start_weights<203>>.
    Found 8-bit register for signal <start_weights<204>>.
    Found 8-bit register for signal <start_weights<205>>.
    Found 8-bit register for signal <start_weights<206>>.
    Found 8-bit register for signal <start_weights<207>>.
    Found 8-bit register for signal <start_weights<208>>.
    Found 8-bit register for signal <start_weights<209>>.
    Found 8-bit register for signal <start_weights<210>>.
    Found 8-bit register for signal <start_weights<211>>.
    Found 8-bit register for signal <start_weights<212>>.
    Found 8-bit register for signal <start_weights<213>>.
    Found 8-bit register for signal <start_weights<214>>.
    Found 8-bit register for signal <start_weights<215>>.
    Found 8-bit register for signal <start_weights<216>>.
    Found 8-bit register for signal <start_weights<217>>.
    Found 8-bit register for signal <start_weights<218>>.
    Found 8-bit register for signal <start_weights<219>>.
    Found 8-bit register for signal <start_weights<220>>.
    Found 8-bit register for signal <start_weights<221>>.
    Found 8-bit register for signal <start_weights<222>>.
    Found 8-bit register for signal <start_weights<223>>.
    Found 8-bit register for signal <start_weights<224>>.
    Found 8-bit register for signal <start_weights<225>>.
    Found 8-bit register for signal <start_weights<226>>.
    Found 8-bit register for signal <start_weights<227>>.
    Found 8-bit register for signal <start_weights<228>>.
    Found 8-bit register for signal <start_weights<229>>.
    Found 8-bit register for signal <start_weights<230>>.
    Found 8-bit register for signal <start_weights<231>>.
    Found 8-bit register for signal <start_weights<232>>.
    Found 8-bit register for signal <start_weights<233>>.
    Found 8-bit register for signal <start_weights<234>>.
    Found 8-bit register for signal <start_weights<235>>.
    Found 8-bit register for signal <start_weights<236>>.
    Found 8-bit register for signal <start_weights<237>>.
    Found 8-bit register for signal <start_weights<238>>.
    Found 8-bit register for signal <start_weights<239>>.
    Found 8-bit register for signal <start_weights<240>>.
    Found 8-bit register for signal <start_weights<241>>.
    Found 8-bit register for signal <start_weights<242>>.
    Found 8-bit register for signal <start_weights<243>>.
    Found 8-bit register for signal <start_weights<244>>.
    Found 8-bit register for signal <start_weights<245>>.
    Found 8-bit register for signal <start_weights<246>>.
    Found 8-bit register for signal <start_weights<247>>.
    Found 8-bit register for signal <start_weights<248>>.
    Found 8-bit register for signal <start_weights<249>>.
    Found 8-bit register for signal <start_weights<250>>.
    Found 8-bit register for signal <start_weights<251>>.
    Found 8-bit register for signal <start_weights<252>>.
    Found 8-bit register for signal <start_weights<253>>.
    Found 8-bit register for signal <start_weights<254>>.
    Found 8-bit register for signal <start_weights<255>>.
    Found 1-bit register for signal <pinged_end>.
    Found 256-bit register for signal <path_back>.
    Found 2-bit register for signal <pointer>.
    Found 22-bit register for signal <clk_div>.
    Found 4-bit register for signal <state>.
    Found finite state machine <FSM_2> for signal <back_state>.
    -----------------------------------------------------------------------
    | States             | 9                                              |
    | Transitions        | 19                                             |
    | Inputs             | 6                                              |
    | Outputs            | 4                                              |
    | Clock              | clk (rising_edge)                              |
    | Power Up State     | waiting                                        |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
INFO:Xst:1799 - State resetting is never reached in FSM <state>.
    Found finite state machine <FSM_3> for signal <state>.
    -----------------------------------------------------------------------
    | States             | 9                                              |
    | Transitions        | 22                                             |
    | Inputs             | 6                                              |
    | Outputs            | 3                                              |
    | Clock              | clk (rising_edge)                              |
    | Power Up State     | waiting                                        |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 22-bit adder for signal <clk_div[21]_GND_21_o_add_260_OUT> created at line 301.
    Found 8-bit adder for signal <path_loc_r[7]_GND_21_o_add_1072_OUT> created at line 448.
    Found 8-bit adder for signal <path_loc_r[7]_GND_21_o_add_1073_OUT> created at line 451.
    Found 8-bit subtractor for signal <GND_21_o_GND_21_o_sub_1072_OUT<7:0>> created at line 445.
    Found 8-bit subtractor for signal <GND_21_o_GND_21_o_sub_1075_OUT<7:0>> created at line 454.
    Found 2-bit 256-to-1 multiplexer for signal <btrace_index[7]_backtrace[255][1]_wide_mux_1059_OUT> created at line 398.
    Found 1-bit 256-to-1 multiplexer for signal <in_path> created at line 467.
    Found 8-bit 256-to-1 multiplexer for signal <weight_out> created at line 468.
    Found 1-bit 256-to-1 multiplexer for signal <end_loc_index[7]_pings[255]_Mux_1083_o> created at line 483.
    Found 8-bit comparator equal for signal <path_loc_r[7]_end_loc_r[7]_equal_1061_o> created at line 402
    Found 8-bit comparator equal for signal <n1320> created at line 408
    Found 8-bit comparator equal for signal <n1324> created at line 428
    Summary:
	inferred   2 Adder/Subtractor(s).
	inferred 2329 D-type flip-flop(s).
	inferred   3 Comparator(s).
	inferred 275 Multiplexer(s).
	inferred   2 Finite State Machine(s).
Unit <node_matrix> synthesized.

Synthesizing Unit <reg_8b>.
    Related source file is "C:\Users\f000jg5\Desktop\final\reg_8b.vhd".
    Found 8-bit register for signal <data_out>.
    Summary:
	inferred   8 D-type flip-flop(s).
Unit <reg_8b> synthesized.

Synthesizing Unit <node>.
    Related source file is "C:\Users\f000jg5\Desktop\final\node.vhd".
    Found 2-bit register for signal <pinged_by_current>.
    Found 8-bit register for signal <counter>.
    Found 3-bit register for signal <state>.
INFO:Xst:1799 - State the_end is never reached in FSM <state>.
    Found finite state machine <FSM_4> for signal <state>.
    -----------------------------------------------------------------------
    | States             | 5                                              |
    | Transitions        | 17                                             |
    | Inputs             | 8                                              |
    | Outputs            | 4                                              |
    | Clock              | clk (rising_edge)                              |
    | Reset              | state<2> (positive)                            |
    | Reset type         | synchronous                                    |
    | Reset State        | waiting                                        |
    | Power Up State     | waiting                                        |
    | Encoding           | auto                                           |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 8-bit subtractor for signal <GND_27_o_GND_27_o_sub_4_OUT<7:0>> created at line 63.
    Found 8x1-bit Read Only RAM for signal <out_ping>
    Summary:
	inferred   1 RAM(s).
	inferred   1 Adder/Subtractor(s).
	inferred  10 D-type flip-flop(s).
	inferred   3 Multiplexer(s).
	inferred   1 Finite State Machine(s).
Unit <node> synthesized.

Synthesizing Unit <vga_color>.
    Related source file is "C:\Users\f000jg5\Desktop\final\vga_color.vhd".
    Found 32-bit comparator lessequal for signal <n0000> created at line 44
    Found 32-bit comparator lessequal for signal <n0002> created at line 44
    Found 32-bit comparator lessequal for signal <n0005> created at line 47
    Found 32-bit comparator lessequal for signal <n0007> created at line 47
    Found 32-bit comparator lessequal for signal <n0010> created at line 50
    Found 32-bit comparator lessequal for signal <n0012> created at line 50
    Found 32-bit comparator lessequal for signal <n0015> created at line 53
    Found 32-bit comparator lessequal for signal <n0017> created at line 53
    Found 32-bit comparator lessequal for signal <n0020> created at line 56
    Found 32-bit comparator lessequal for signal <n0022> created at line 56
    Found 32-bit comparator lessequal for signal <n0025> created at line 59
    Found 32-bit comparator lessequal for signal <n0027> created at line 59
    Found 32-bit comparator lessequal for signal <n0030> created at line 62
    Found 32-bit comparator lessequal for signal <n0032> created at line 62
    Found 32-bit comparator lessequal for signal <n0035> created at line 65
    Found 32-bit comparator lessequal for signal <n0037> created at line 65
    Found 32-bit comparator lessequal for signal <n0040> created at line 68
    Found 32-bit comparator lessequal for signal <n0042> created at line 68
    Found 32-bit comparator lessequal for signal <n0045> created at line 71
    Found 32-bit comparator lessequal for signal <n0047> created at line 71
    Found 32-bit comparator lessequal for signal <n0050> created at line 74
    Found 32-bit comparator lessequal for signal <n0052> created at line 74
    Found 32-bit comparator lessequal for signal <n0055> created at line 77
    Found 32-bit comparator lessequal for signal <n0057> created at line 77
    Found 32-bit comparator lessequal for signal <n0060> created at line 80
    Found 32-bit comparator lessequal for signal <n0062> created at line 80
    Found 32-bit comparator lessequal for signal <n0065> created at line 83
    Found 32-bit comparator lessequal for signal <n0067> created at line 83
    Found 32-bit comparator lessequal for signal <n0070> created at line 86
    Found 32-bit comparator lessequal for signal <n0072> created at line 86
    Found 32-bit comparator lessequal for signal <n0075> created at line 89
    Found 32-bit comparator lessequal for signal <n0077> created at line 89
    Found 32-bit comparator lessequal for signal <n0111> created at line 97
    Found 32-bit comparator lessequal for signal <n0113> created at line 97
    Found 32-bit comparator lessequal for signal <n0116> created at line 100
    Found 32-bit comparator lessequal for signal <n0118> created at line 100
    Found 32-bit comparator lessequal for signal <n0121> created at line 103
    Found 32-bit comparator lessequal for signal <n0123> created at line 103
    Found 32-bit comparator lessequal for signal <n0126> created at line 106
    Found 32-bit comparator lessequal for signal <n0128> created at line 106
    Found 32-bit comparator lessequal for signal <n0131> created at line 109
    Found 32-bit comparator lessequal for signal <n0133> created at line 109
    Found 32-bit comparator lessequal for signal <n0136> created at line 112
    Found 32-bit comparator lessequal for signal <n0138> created at line 112
    Found 32-bit comparator lessequal for signal <n0141> created at line 115
    Found 32-bit comparator lessequal for signal <n0143> created at line 115
    Found 32-bit comparator lessequal for signal <n0146> created at line 118
    Found 32-bit comparator lessequal for signal <n0148> created at line 118
    Found 32-bit comparator lessequal for signal <n0151> created at line 121
    Found 32-bit comparator lessequal for signal <n0153> created at line 121
    Found 32-bit comparator lessequal for signal <n0156> created at line 124
    Found 32-bit comparator lessequal for signal <n0158> created at line 124
    Found 32-bit comparator lessequal for signal <n0161> created at line 127
    Found 32-bit comparator lessequal for signal <n0163> created at line 127
    Found 32-bit comparator lessequal for signal <n0166> created at line 130
    Found 32-bit comparator lessequal for signal <n0168> created at line 130
    Found 32-bit comparator lessequal for signal <n0171> created at line 133
    Found 32-bit comparator lessequal for signal <n0173> created at line 133
    Found 32-bit comparator lessequal for signal <n0176> created at line 136
    Found 32-bit comparator lessequal for signal <n0178> created at line 136
    Found 32-bit comparator lessequal for signal <n0181> created at line 139
    Found 32-bit comparator lessequal for signal <n0183> created at line 139
    Found 32-bit comparator lessequal for signal <n0186> created at line 142
    Found 32-bit comparator lessequal for signal <n0188> created at line 142
    Found 8-bit comparator greater for signal <color_shade[7]_GND_213_o_LessThan_101_o> created at line 159
    Found 8-bit comparator greater for signal <color_shade[7]_GND_213_o_LessThan_102_o> created at line 160
    Found 8-bit comparator greater for signal <color_shade[7]_GND_213_o_LessThan_103_o> created at line 161
    Found 8-bit comparator greater for signal <color_shade[7]_GND_213_o_LessThan_104_o> created at line 162
    Found 8-bit comparator greater for signal <color_shade[7]_PWR_26_o_LessThan_105_o> created at line 163
    Found 8-bit comparator greater for signal <color_shade[7]_PWR_26_o_LessThan_106_o> created at line 164
    Summary:
	inferred  70 Comparator(s).
	inferred  69 Multiplexer(s).
Unit <vga_color> synthesized.

Synthesizing Unit <vga_controller>.
    Related source file is "C:\Users\f000jg5\Desktop\final\vga_controller.vhd".
    Found 1-bit register for signal <vs>.
    Found 32-bit register for signal <h_count>.
    Found 32-bit register for signal <v_count>.
    Found 3-bit register for signal <red>.
    Found 3-bit register for signal <green>.
    Found 2-bit register for signal <blue>.
    Found 32-bit register for signal <column>.
    Found 32-bit register for signal <row>.
    Found 1-bit register for signal <hs>.
    Found 32-bit adder for signal <h_count[31]_GND_214_o_add_3_OUT> created at line 53.
    Found 32-bit adder for signal <v_count[31]_GND_214_o_add_4_OUT> created at line 55.
    Found 32-bit subtractor for signal <h_count[31]_GND_214_o_sub_19_OUT<31:0>> created at line 80.
    Found 32-bit subtractor for signal <v_count[31]_GND_214_o_sub_24_OUT<31:0>> created at line 88.
    Found 32-bit comparator lessequal for signal <GND_214_o_h_count[31]_LessThan_1_o> created at line 39
    Found 32-bit comparator lessequal for signal <GND_214_o_v_count[31]_LessThan_2_o> created at line 45
    Found 32-bit comparator greater for signal <GND_214_o_h_count[31]_LessThan_3_o> created at line 52
    Found 32-bit comparator greater for signal <h_count[31]_GND_214_o_LessThan_10_o> created at line 64
    Found 32-bit comparator greater for signal <GND_214_o_h_count[31]_LessThan_11_o> created at line 64
    Found 32-bit comparator greater for signal <v_count[31]_GND_214_o_LessThan_12_o> created at line 64
    Found 32-bit comparator greater for signal <GND_214_o_v_count[31]_LessThan_13_o> created at line 64
    Found 32-bit comparator greater for signal <GND_214_o_h_count[31]_LessThan_17_o> created at line 75
    Found 32-bit comparator greater for signal <h_count[31]_GND_214_o_LessThan_18_o> created at line 77
    Found 32-bit comparator greater for signal <GND_214_o_v_count[31]_LessThan_22_o> created at line 83
    Found 32-bit comparator greater for signal <v_count[31]_GND_214_o_LessThan_23_o> created at line 85
    Summary:
	inferred   4 Adder/Subtractor(s).
	inferred 138 D-type flip-flop(s).
	inferred  11 Comparator(s).
	inferred   2 Multiplexer(s).
Unit <vga_controller> synthesized.

=========================================================================
HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 256
 8x1-bit single-port Read Only RAM                     : 256
# Adders/Subtractors                                   : 267
 22-bit adder                                          : 1
 32-bit adder                                          : 5
 32-bit subtractor                                     : 2
 4-bit adder                                           : 1
 4-bit subtractor                                      : 1
 8-bit addsub                                          : 1
 8-bit subtractor                                      : 256
# Registers                                            : 798
 1-bit register                                        : 6
 10-bit register                                       : 2
 2-bit register                                        : 259
 22-bit register                                       : 1
 256-bit register                                      : 1
 3-bit register                                        : 2
 32-bit register                                       : 8
 4-bit register                                        : 2
 8-bit register                                        : 517
# Comparators                                          : 86
 32-bit comparator equal                               : 1
 32-bit comparator greater                             : 10
 32-bit comparator lessequal                           : 66
 8-bit comparator equal                                : 3
 8-bit comparator greater                              : 6
# Multiplexers                                         : 1118
 1-bit 2-to-1 multiplexer                              : 288
 1-bit 256-to-1 multiplexer                            : 2
 10-bit 2-to-1 multiplexer                             : 1
 2-bit 2-to-1 multiplexer                              : 513
 2-bit 256-to-1 multiplexer                            : 1
 32-bit 2-to-1 multiplexer                             : 4
 4-bit 2-to-1 multiplexer                              : 30
 8-bit 2-to-1 multiplexer                              : 278
 8-bit 256-to-1 multiplexer                            : 1
# FSMs                                                 : 260

=========================================================================
INFO:Xst:1767 - HDL ADVISOR - Resource sharing has identified that some arithmetic operations in this design can share the same physical resources for reduced device utilization. For improved clock frequency you may try to disable resource sharing.

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================

WARNING:Xst:2677 - Node <reg_0> of sequential type is unconnected in block <s_reg>.

Synthesizing (advanced) Unit <SerialTx>.
The following registers are absorbed into counter <br_cnt>: 1 register on signal <br_cnt>.
The following registers are absorbed into counter <tx_ctr>: 1 register on signal <tx_ctr>.
Unit <SerialTx> synthesized (advanced).

Synthesizing (advanced) Unit <brg>.
The following registers are absorbed into counter <counter>: 1 register on signal <counter>.
Unit <brg> synthesized (advanced).

Synthesizing (advanced) Unit <controller>.
The following registers are absorbed into counter <tick_counter>: 1 register on signal <tick_counter>.
The following registers are absorbed into counter <counter>: 1 register on signal <counter>.
Unit <controller> synthesized (advanced).

Synthesizing (advanced) Unit <node>.
The following registers are absorbed into counter <counter>: 1 register on signal <counter>.
INFO:Xst:3218 - HDL ADVISOR - The RAM <Mram_out_ping> will be implemented on LUTs either because you have described an asynchronous read or because of currently unsupported block RAM features. If you have described an asynchronous read, making it synchronous would allow you to take advantage of available block RAM resources, for optimized device usage and improved timings. Please refer to your documentation for coding guidelines.
    -----------------------------------------------------------------------
    | ram_type           | Distributed                         |          |
    -----------------------------------------------------------------------
    | Port A                                                              |
    |     aspect ratio   | 8-word x 1-bit                      |          |
    |     weA            | connected to signal <GND>           | high     |
    |     addrA          | connected to signal <("0",state)>   |          |
    |     diA            | connected to signal <GND>           |          |
    |     doA            | connected to signal <out_ping>      |          |
    -----------------------------------------------------------------------
Unit <node> synthesized (advanced).

Synthesizing (advanced) Unit <node_matrix>.
The following registers are absorbed into counter <clk_div>: 1 register on signal <clk_div>.
Unit <node_matrix> synthesized (advanced).

Synthesizing (advanced) Unit <vga_controller>.
The following registers are absorbed into counter <h_count>: 1 register on signal <h_count>.
The following registers are absorbed into counter <v_count>: 1 register on signal <v_count>.
Unit <vga_controller> synthesized (advanced).
WARNING:Xst:2677 - Node <reg_0> of sequential type is unconnected in block <shift_reg>.

=========================================================================
Advanced HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 256
 8x1-bit single-port distributed Read Only RAM         : 256
# Adders/Subtractors                                   : 3
 32-bit subtractor                                     : 2
 8-bit addsub                                          : 1
# Counters                                             : 264
 22-bit up counter                                     : 1
 32-bit up counter                                     : 5
 4-bit down counter                                    : 1
 4-bit up counter                                      : 1
 8-bit down counter                                    : 256
# Registers                                            : 2989
 Flip-Flops                                            : 2989
# Comparators                                          : 86
 32-bit comparator equal                               : 1
 32-bit comparator greater                             : 10
 32-bit comparator lessequal                           : 66
 8-bit comparator equal                                : 3
 8-bit comparator greater                              : 6
# Multiplexers                                         : 870
 1-bit 2-to-1 multiplexer                              : 298
 1-bit 256-to-1 multiplexer                            : 2
 2-bit 2-to-1 multiplexer                              : 513
 2-bit 256-to-1 multiplexer                            : 1
 32-bit 2-to-1 multiplexer                             : 3
 4-bit 2-to-1 multiplexer                              : 30
 8-bit 2-to-1 multiplexer                              : 22
 8-bit 256-to-1 multiplexer                            : 1
# FSMs                                                 : 260

=========================================================================

=========================================================================
*                         Low Level Synthesis                           *
=========================================================================
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <s_rx/control/FSM_0> on signal <state[1:3]> with user encoding.
----------------------
 State    | Encoding
----------------------
 waiting  | 000
 data     | 001
 shifting | 010
 loading  | 011
 done     | 100
----------------------
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <s_tx/FSM_1> on signal <curr_state[1:3]> with sequential encoding.
--------------------
 State  | Encoding
--------------------
 sidle  | 000
 ssync  | unreached
 sload  | 001
 swait  | 010
 sshift | 011
 sdone  | 100
--------------------
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <nm/FSM_3> on signal <state[1:4]> with user encoding.
-------------------------
 State       | Encoding
-------------------------
 waiting     | 0000
 command     | 0001
 re_w_addr   | 0010
 re_w_weight | 0011
 re_beg      | 0100
 re_end      | 0101
 start       | 0110
 finish      | 0111
 resetting   | unreached
-------------------------
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <nm/FSM_2> on signal <back_state[1:4]> with user encoding.
---------------------------
 State         | Encoding
---------------------------
 waiting       | 0000
 get_pointer   | 0001
 first_set_loc | 0010
 set_loc       | 0011
 go_n          | 0100
 go_e          | 0101
 go_s          | 0110
 go_w          | 0111
 done          | 1000
---------------------------
Analyzing FSM <MFsm> for best encoding.
Optimizing FSM <nm/node_matrix_full[0].UL_corner_node.NC1/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[1].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[2].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[3].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[4].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[5].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[6].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[7].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[8].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[9].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[10].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[11].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[12].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[13].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[14].top_row_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[15].UR_corner_node.NC2/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[16].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[17].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[18].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[19].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[20].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[21].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[22].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[23].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[24].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[25].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[26].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[27].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[28].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[29].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[30].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[31].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[32].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[33].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[34].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[35].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[36].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[37].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[38].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[39].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[40].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[41].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[42].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[43].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[44].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[45].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[46].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[47].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[48].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[49].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[50].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[51].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[52].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[53].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[54].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[55].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[56].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[57].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[58].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[59].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[60].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[61].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[62].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[63].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[64].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[65].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[66].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[67].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[68].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[69].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[70].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[71].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[72].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[73].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[74].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[75].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[76].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[77].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[78].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[79].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[80].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[81].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[82].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[83].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[84].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[85].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[86].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[87].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[88].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[89].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[90].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[91].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[92].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[93].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[94].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[95].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[96].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[97].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[98].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[99].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[100].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[101].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[102].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[103].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[104].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[105].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[106].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[107].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[108].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[109].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[110].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[111].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[112].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[113].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[114].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[115].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[116].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[117].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[118].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[119].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[120].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[121].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[122].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[123].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[124].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[125].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[126].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[127].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[128].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[129].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[130].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[131].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[132].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[133].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[134].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[135].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[136].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[137].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[138].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[139].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[140].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[141].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[142].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[143].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[144].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[145].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[146].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[147].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[148].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[149].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[150].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[151].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[152].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[153].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[154].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[155].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[156].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[157].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[158].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[159].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[160].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[161].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[162].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[163].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[164].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[165].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[166].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[167].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[168].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[169].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[170].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[171].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[172].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[173].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[174].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[175].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[176].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[177].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[178].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[179].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[180].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[181].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[182].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[183].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[184].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[185].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[186].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[187].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[188].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[189].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[190].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[191].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[192].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[193].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[194].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[195].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[196].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[197].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[198].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[199].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[200].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[201].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[202].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[203].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[204].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[205].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[206].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[207].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[208].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[209].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[210].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[211].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[212].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[213].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[214].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[215].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[216].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[217].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[218].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[219].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[220].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[221].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[222].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[223].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[224].left_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[225].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[226].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[227].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[228].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[229].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[230].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[231].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[232].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[233].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[234].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[235].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[236].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[237].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[238].main_nodes.NX/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[239].right_side_nodes.NTR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[240].LL_corner_node.NC3/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[241].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[242].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[243].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[244].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[245].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[246].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[247].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[248].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[249].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[250].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[251].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[252].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[253].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[254].bottow_row_nodes.NBR/FSM_4> on signal <state[1:2]> with sequential encoding.
Optimizing FSM <nm/node_matrix_full[255].LR_corner_node.NC4/FSM_4> on signal <state[1:2]> with sequential encoding.
-----------------------
 State     | Encoding
-----------------------
 waiting   | 00
 countdown | 01
 ping      | 10
 done      | 11
 the_end   | unreached
-----------------------

Optimizing unit <shift_reg> ...

Optimizing unit <load_reg> ...

Optimizing unit <reg_8b> ...

Optimizing unit <solver> ...

Optimizing unit <controller> ...

Optimizing unit <SerialTx> ...

Optimizing unit <node_matrix> ...

Optimizing unit <node> ...

Optimizing unit <vga_controller> ...

Optimizing unit <vga_color> ...
WARNING:Xst:1710 - FF/Latch <nm/node_matrix_full[240].LL_corner_node.NC3/pinged_by_current_1> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_11> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_12> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_13> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_14> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_15> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_16> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_17> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_18> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_19> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_20> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_21> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_22> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_23> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_24> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_25> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_26> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_27> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_28> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_29> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_30> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_31> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_10> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_11> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_10> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_11> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_12> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_13> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_14> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_15> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_16> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_17> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_18> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_19> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_20> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_21> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_22> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_23> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_24> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_25> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_26> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_27> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_28> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_29> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_30> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/column_31> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_9> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <v_cont/row_10> (without init value) has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_10> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_8> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_9> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_11> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_12> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_13> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_14> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_15> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_16> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_19> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_17> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_18> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_20> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_21> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_22> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_23> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_24> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_25> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_28> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_26> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_27> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_29> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_30> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_31> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_12> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_13> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_14> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_15> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_16> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_17> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_18> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_19> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_20> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_21> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_22> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_23> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_24> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_25> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_26> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_27> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_28> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_29> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_30> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <v_cont/h_count_31> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_4> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_5> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_6> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1293 - FF/Latch <s_rx/control/tick_counter_7> has a constant value of 0 in block <solver>. This FF/Latch will be trimmed during the optimization process.
INFO:Xst:2261 - The FF/Latch <nm/node_matrix_full[255].LR_corner_node.NC4/pinged_by_current_1> in Unit <solver> is equivalent to the following FF/Latch, which will be removed : <nm/node_matrix_full[255].LR_corner_node.NC4/pinged_by_current_0> 

Mapping all equations...
Building and optimizing final netlist ...
Found area constraint ratio of 100 (+ 5) on block solver, actual ratio is 122.
Optimizing block <solver> to meet ratio 100 (+ 5) of 2278 slices :
WARNING:Xst:2254 - Area constraint could not be met for block <solver>, final ratio is 131.
FlipFlop v_cont/column_2 has been replicated 1 time(s)
FlipFlop v_cont/column_3 has been replicated 1 time(s)
FlipFlop v_cont/column_4 has been replicated 1 time(s)
FlipFlop v_cont/column_5 has been replicated 1 time(s)
FlipFlop v_cont/column_6 has been replicated 1 time(s)
FlipFlop v_cont/column_7 has been replicated 1 time(s)
FlipFlop v_cont/column_8 has been replicated 1 time(s)
FlipFlop v_cont/column_9 has been replicated 1 time(s)
FlipFlop v_cont/row_1 has been replicated 1 time(s)
FlipFlop v_cont/row_2 has been replicated 1 time(s)
FlipFlop v_cont/row_3 has been replicated 1 time(s)
FlipFlop v_cont/row_4 has been replicated 1 time(s)
FlipFlop v_cont/row_5 has been replicated 1 time(s)
FlipFlop v_cont/row_6 has been replicated 1 time(s)
FlipFlop v_cont/row_7 has been replicated 1 time(s)
FlipFlop v_cont/row_8 has been replicated 1 time(s)

Final Macro Processing ...

Processing Unit <solver> :
	Found 3-bit shift register for signal <s_rx/df_sync/async_out>.
Unit <solver> processed.

=========================================================================
Final Register Report

Macro Statistics
# Registers                                            : 5668
 Flip-Flops                                            : 5668
# Shift Registers                                      : 1
 3-bit shift register                                  : 1

=========================================================================

=========================================================================
*                           Partition Report                            *
=========================================================================

Partition Implementation Status
-------------------------------

  No Partitions were found in this design.

-------------------------------

=========================================================================
*                            Design Summary                             *
=========================================================================

Top Level Output File Name         : solver.ngc

Primitive and Black Box Usage:
------------------------------
# BELS                             : 13181
#      GND                         : 1
#      INV                         : 29
#      LUT1                        : 140
#      LUT2                        : 792
#      LUT3                        : 69
#      LUT4                        : 142
#      LUT5                        : 3035
#      LUT6                        : 3728
#      MUXCY                       : 2436
#      MUXF7                       : 409
#      MUXF8                       : 204
#      VCC                         : 1
#      XORCY                       : 2195
# FlipFlops/Latches                : 5669
#      FD                          : 42
#      FDE                         : 4409
#      FDR                         : 1076
#      FDRE                        : 131
#      FDSE                        : 11
# Shift Registers                  : 1
#      SRLC16E                     : 1
# Clock Buffers                    : 2
#      BUFG                        : 2
# IO Buffers                       : 13
#      IBUF                        : 1
#      IBUFG                       : 1
#      OBUF                        : 11
# DCMs                             : 1
#      DCM_SP                      : 1

Device utilization summary:
---------------------------

Selected Device : 6slx16csg324-3 


Slice Logic Utilization: 
 Number of Slice Registers:            5669  out of  18224    31%  
 Number of Slice LUTs:                 7936  out of   9112    87%  
    Number used as Logic:              7935  out of   9112    87%  
    Number used as Memory:                1  out of   2176     0%  
       Number used as SRL:                1

Slice Logic Distribution: 
 Number of LUT Flip Flop pairs used:   9934
   Number with an unused Flip Flop:    4265  out of   9934    42%  
   Number with an unused LUT:          1998  out of   9934    20%  
   Number of fully used LUT-FF pairs:  3671  out of   9934    36%  
   Number of unique control sets:       785

IO Utilization: 
 Number of IOs:                          13
 Number of bonded IOBs:                  13  out of    232     5%  

Specific Feature Utilization:
 Number of BUFG/BUFGCTRLs:                2  out of     16    12%  

---------------------------
Partition Resource Summary:
---------------------------

  No Partitions were found in this design.

---------------------------


=========================================================================
Timing Report

NOTE: THESE TIMING NUMBERS ARE ONLY A SYNTHESIS ESTIMATE.
      FOR ACCURATE TIMING INFORMATION PLEASE REFER TO THE TRACE REPORT
      GENERATED AFTER PLACE-and-ROUTE.

Clock Information:
------------------
-----------------------------------+------------------------+-------+
Clock Signal                       | Clock buffer(FF name)  | Load  |
-----------------------------------+------------------------+-------+
clk_real                           | DCM_SP:CLKFX           | 5670  |
-----------------------------------+------------------------+-------+

Asynchronous Control Signals Information:
----------------------------------------
No asynchronous control signals found in this design

Timing Summary:
---------------
Speed Grade: -3

   Minimum period: 3.495ns (Maximum Frequency: 286.088MHz)
   Minimum input arrival time before clock: 1.801ns
   Maximum output required time after clock: 3.634ns
   Maximum combinational path delay: No path found

Timing Details:
---------------
All values displayed in nanoseconds (ns)

=========================================================================
Timing constraint: Default period analysis for Clock 'clk_real'
  Clock period: 3.495ns (frequency: 286.087MHz)
  Total number of paths / destination ports: 23900489 / 10861
-------------------------------------------------------------------------
Delay:               13.982ns (Levels of Logic = 19)
  Source:            v_cont/column_3_1 (FF)
  Destination:       v_cont/green_0 (FF)
  Source Clock:      clk_real rising 0.3X
  Destination Clock: clk_real rising 0.3X

  Data Path: v_cont/column_3_1 to v_cont/green_0
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDR:C->Q             24   0.447   1.517  v_cont/column_3_1 (v_cont/column_3_1)
     LUT5:I0->O            1   0.203   0.000  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_lut<0> (v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_lut<0>)
     MUXCY:S->O            1   0.172   0.000  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<0> (v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<0>)
     MUXCY:CI->O           1   0.019   0.000  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<1> (v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<1>)
     MUXCY:CI->O           1   0.019   0.000  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<2> (v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<2>)
     MUXCY:CI->O           1   0.019   0.000  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<3> (v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<3>)
     MUXCY:CI->O           1   0.019   0.000  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<4> (v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<4>)
     MUXCY:CI->O           1   0.213   0.684  v_col/Mcompar_GND_213_o_column[31]_LessThan_52_o_cy<5> (v_col/GND_213_o_column[31]_LessThan_52_o)
     LUT2:I0->O           31   0.203   1.382  v_col/column[31]_GND_213_o_AND_554_o1 (v_col/column[31]_GND_213_o_AND_554_o)
     LUT6:I4->O            1   0.203   0.684  v_col/row_enable_column_enable_AND_569_o7_SW0 (N563)
     LUT6:I4->O           40   0.203   1.406  v_col/row_enable_column_enable_AND_569_o7 (v_col/row_enable_column_enable_AND_569_o)
     LUT6:I5->O          576   0.205   2.106  v_col/Mmux_cell_address26 (cell_address<1>)
     LUT6:I5->O            1   0.205   0.000  nm/Mmux_weight_out_1139 (nm/Mmux_weight_out_1139)
     MUXF7:I1->O           1   0.140   0.000  nm/Mmux_weight_out_10_f7_31 (nm/Mmux_weight_out_10_f732)
     MUXF8:I1->O           1   0.152   0.827  nm/Mmux_weight_out_9_f8_24 (nm/Mmux_weight_out_9_f825)
     LUT6:I2->O            1   0.203   0.000  nm/Mmux_weight_out_46 (nm/Mmux_weight_out_46)
     MUXF7:I1->O           1   0.140   0.000  nm/Mmux_weight_out_3_f7_5 (nm/Mmux_weight_out_3_f76)
     MUXF8:I1->O          10   0.152   1.104  nm/Mmux_weight_out_2_f8_5 (weight<6>)
     LUT4:I0->O            2   0.203   0.845  v_col/Mmux_color511 (v_col/Mmux_color51)
     LUT6:I3->O            1   0.205   0.000  v_col/Mmux_color31 (color<2>)
     FDR:D                     0.102          v_cont/green_0
    ----------------------------------------
    Total                     13.982ns (3.427ns logic, 10.555ns route)
                                       (24.5% logic, 75.5% route)

=========================================================================
Timing constraint: Default OFFSET IN BEFORE for Clock 'clk_real'
  Total number of paths / destination ports: 1 / 1
-------------------------------------------------------------------------
Offset:              1.801ns (Levels of Logic = 1)
  Source:            TXD (PAD)
  Destination:       s_rx/df_sync/Mshreg_async_out (FF)
  Destination Clock: clk_real rising 0.3X

  Data Path: TXD to s_rx/df_sync/Mshreg_async_out
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     IBUF:I->O             1   1.222   0.579  TXD_IBUF (TXD_IBUF)
     SRLC16E:D                -0.060          s_rx/df_sync/Mshreg_async_out
    ----------------------------------------
    Total                      1.801ns (1.222ns logic, 0.579ns route)
                                       (67.9% logic, 32.1% route)

=========================================================================
Timing constraint: Default OFFSET OUT AFTER for Clock 'clk_real'
  Total number of paths / destination ports: 11 / 11
-------------------------------------------------------------------------
Offset:              3.634ns (Levels of Logic = 1)
  Source:            s_tx/tx_reg_0 (FF)
  Destination:       RXD (PAD)
  Source Clock:      clk_real rising 0.3X

  Data Path: s_tx/tx_reg_0 to RXD
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FDE:C->Q              2   0.447   0.616  s_tx/tx_reg_0 (s_tx/tx_reg_0)
     OBUF:I->O                 2.571          RXD_OBUF (RXD)
    ----------------------------------------
    Total                      3.634ns (3.018ns logic, 0.616ns route)
                                       (83.0% logic, 17.0% route)

=========================================================================

Cross Clock Domains Report:
--------------------------

Clock to Setup on destination clock clk_real
---------------+---------+---------+---------+---------+
               | Src:Rise| Src:Fall| Src:Rise| Src:Fall|
Source Clock   |Dest:Rise|Dest:Rise|Dest:Fall|Dest:Fall|
---------------+---------+---------+---------+---------+
clk_real       |   13.982|         |         |         |
---------------+---------+---------+---------+---------+

=========================================================================


Total REAL time to Xst completion: 73.00 secs
Total CPU time to Xst completion: 72.57 secs
 
--> 

Total memory usage is 375596 kilobytes

Number of errors   :    0 (   0 filtered)
Number of warnings :  101 (   0 filtered)
Number of infos    :    8 (   0 filtered)

